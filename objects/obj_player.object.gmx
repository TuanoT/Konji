<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initalize Variables

image_speed = .6;
can_shoot = true;
hp = 100;
max_hp = 100;
mp = 100;
max_mp = 100;
spd = 6;
vitality = 5;
wisdom = 5;
defence = 0;
rate_of_fire_multiplier = 100;
in_water = false;
path_spd = 0;
thorns = 0;
can_shoot_special = true;
crit_chance = 0;

// Buffs
poison_amount = 0;
poison_damage = 3;
slow_multiplier = 1;
water_slow_multiplier = 1;
vitality_multiplier = 1;
dexterity_multiplier = 1;
invulnerable = false;
cursed_multiplier = 1;
sick = false;

// Fake Alarms
slow_alarm = -1;
healing_alarm = -1;
invulnerable_alarm = -1;
dexterity_alarm = -1;
cursed_alarm = -1;
sick_alarm = -1;

alarm[1] = 15; // Poison Alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Re-enter main room (enter any room)

obj_view_controller.x = obj_player.x;
obj_view_controller.y = obj_player.y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set can shoot special to true

can_shoot_special = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Poison Damage

if (poison_amount &gt;= 1) {

    other.hp -= poison_damage;
    
    var inst = instance_create(x, y - (other.sprite_height / 2), obj_damage_text);
    inst.text = poison_damage;
    inst.colour = c_purple;
    
    poison_amount--;
} else {
    poison_amount = 0;
}

alarm[1] = 15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set can shoot to true

can_shoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Execute the move script

scr_player_move();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Regen Health and Mana

if (hp + (vitality / 150) &lt; max_hp) {

    // Sick
    if sick == false {
        hp += (vitality / 150);
    }
} else {
    hp = max_hp;
}

if (mp + (wisdom / 150) &lt; max_mp) {
    mp += (wisdom / 150);
} else {
    mp = max_mp;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change the depth depending on the y axis

depth = -y
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Find Stats

// Initialize Stats
var helm_def = 0;
var ring_def = 0;
var helm_vit = 0;
var ring_vit = 0;
var helm_wis = 0;
var ring_wis = 0;
var ring_spd = 0;
var helm_spd = 0;
var ring_hp = 0;
var ring_mp = 0;
var ring_dex = 100;
var helm_dex = 100;
var ring_crit = 0;
thorns = 0;

// Helmet
if (obj_controller.valid_item[3] == 0 &amp;&amp; obj_controller.inventory_slot[11] != -1) {
    helm_def = global.item_defence[obj_controller.inventory_slot[11]];
    helm_vit = global.item_vitality[obj_controller.inventory_slot[11]];
    helm_wis = global.item_wisdom[obj_controller.inventory_slot[11]];
    helm_spd = global.item_speed[obj_controller.inventory_slot[11]];
    helm_dex = global.item_dexterity[obj_controller.inventory_slot[11]];
    
    // Thorns cause why not
    thorns = global.item_thorns[obj_controller.inventory_slot[11]];
}

// Ring
if (obj_controller.valid_item[4] == 0 &amp;&amp; obj_controller.inventory_slot[12] != -1) {
    ring_def = global.item_defence[obj_controller.inventory_slot[12]];
    ring_vit = global.item_vitality[obj_controller.inventory_slot[12]];
    ring_wis = global.item_wisdom[obj_controller.inventory_slot[12]];
    ring_spd = global.item_speed[obj_controller.inventory_slot[12]];
    ring_hp = global.item_health[obj_controller.inventory_slot[12]];
    ring_mp = global.item_mana[obj_controller.inventory_slot[12]];
    ring_dex = global.item_dexterity[obj_controller.inventory_slot[12]];
    ring_crit = global.item_crit_chance[obj_controller.inventory_slot[12]];
}

// Set Stats
spd = (6 + ring_spd + helm_spd) * slow_multiplier * water_slow_multiplier + path_spd;
path_spd = 0;
vitality = (5 + helm_vit + ring_vit + global.base_vitality) * vitality_multiplier;
wisdom = 5 + helm_wis + ring_wis + global.base_wisdom;
defence = helm_def + ring_def + global.base_defence;
rate_of_fire_multiplier = (100 + (ring_dex - 100) + (helm_dex - 100)) * dexterity_multiplier;
max_hp = 100 + ring_hp + global.base_life;
max_mp = 100 + ring_mp + global.base_mana;
crit_chance = ring_crit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Die

if (hp &lt;= 0) {
    room = rom_death;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if in water

if (place_meeting(x, y, obj_lake)) {
    in_water = true;
    water_slow_multiplier = .5;
} else {
    in_water = false;
    water_slow_multiplier = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fake Alarms

// Slow
if (slow_alarm &gt; -1) {
    slow_alarm--;
} else {
    slow_alarm = -1;
}

if slow_alarm == 0 {
    slow_multiplier = 1;
}

// Healing
if (healing_alarm &gt; -1) {
    healing_alarm--;
} else {
    healing_alarm = -1;
}

if healing_alarm == 0 {
    vitality_multiplier = 1;
}

// Invulnerable
if (invulnerable_alarm &gt; -1) {
    invulnerable_alarm--;
} else {
    invulnerable_alarm = -1;
}

if invulnerable_alarm == 0 {
    invulnerable = false;
}

// Dexterity
if (dexterity_alarm &gt; -1) {
    dexterity_alarm--;
} else {
    dexterity_alarm = -1;
}

if dexterity_alarm == 0 {
    dexterity_multiplier = 1;
}

// Cursed
if (cursed_alarm &gt; -1) {
    cursed_alarm--;
} else {
    cursed_alarm = -1;
}

if cursed_alarm == 0 {
    cursed_multiplier = 1;
}

// Sick
if (sick_alarm &gt; -1) {
    sick_alarm--;
} else {
    sick_alarm = -1;
}

if sick_alarm == 0 {
    sick = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Use Special

var item = obj_controller.inventory_slot[10];

if item != -1 {
    if (global.item_type[item] == 'medical' || global.item_type[item] == 'throwable' || global.item_type[item] == 'shield') {
        if ((mp - global.item_mana_cost[item]) &gt;= 0 &amp;&amp; keyboard_check_pressed(global.special_key) &amp;&amp; can_shoot_special == true) {
            
            // Medical
            if global.item_type[item] == 'medical' {
                var heal_text = 0;
                if (hp + global.item_health[item] &lt; max_hp) {
                    hp += global.item_health[item];
                    heal_text = global.item_health[item];
                } else {
                    heal_text = max_hp - hp;
                    hp = max_hp;
                }
                
                mp -= global.item_mana_cost[item];
                
                // Draw Text
                if heal_text != 0 {
                    var inst = instance_create(x, y - 16, obj_damage_text);
                    inst.text = round(heal_text);
                    inst.colour = c_lime;
                }
        
                // Play Fire Sound
                var snd = audio_play_sound(global.item_fire_sound[item], 1, false);
                audio_sound_pitch(snd, random_range(0.95, 1.05));
                
                // Medical Special
                switch global.item_special[item] {
                    case 'Healing':
                        healing_alarm = global.item_special_amount[item];
                        vitality_multiplier = 5;
                        break;
                        
                    case 'Invulnerable':
                        invulnerable_alarm = global.item_special_amount[item];
                        invulnerable = true;
                        break;
                        
                    case 'Berserk':
                        dexterity_alarm = global.item_special_amount[item];
                        dexterity_multiplier = 1.5;
                        break;
                        
                    case 'Quick':
                        slow_alarm = global.item_special_amount[item];
                        slow_multiplier = 2;
                        break;
                        
                    case 'Turtle':
                        slow_alarm = global.item_special_amount[item];
                        slow_multiplier = .5;
                        invulnerable_alarm = global.item_special_amount[item];
                        invulnerable = true;
                        break;
                        
                    case 'Summon':
                        instance_create(x, y, global.item_special_amount[item])
                        break;
                }
            }
                
            // Throwable
            if global.item_type[item] == 'throwable' {
                var num = global.item_shot_angle_start[item];
                repeat global.item_shot_number[item] {
                    var inst = instance_create(x, y-16, obj_player_special_shot);
                    
                    with inst {
                        direction = point_direction(x, y, mouse_x, mouse_y) + num;
                        image_angle = direction;
                        speed = global.item_shot_speed[item];
                        range = global.item_range[item];
                        damage = global.item_damage[item];
                        sprite_index = global.item_shot_sprite[item];
                        num += global.item_shot_angle_increment[item];
                        special = global.item_special[item];
                        special_time = global.item_special_amount[item];                
                    }
                }
                mp -= global.item_mana_cost[item];
                
                // Play Fire Sound
                var snd = audio_play_sound(global.item_fire_sound[item], 1, false);
                audio_sound_pitch(snd, random_range(0.95, 1.05));
            }
            
            // Shield 'cause fuck you
            if global.item_type[item] == 'shield' {
                var num = global.item_shot_angle_start[item];
                repeat global.item_shot_number[item] {
                    var inst = instance_create(x, y-16, obj_player_special_shot);
                    
                    with inst {
                        direction = point_direction(x, y, mouse_x, mouse_y) + num;
                        image_angle = direction;
                        speed = global.item_shot_speed[item];
                        range = global.item_range[item];
                        damage = global.item_damage[item];
                        sprite_index = global.item_shot_sprite[item];
                        num += global.item_shot_angle_increment[item];
                        special = global.item_special[item];
                        special_time = global.item_special_amount[item];  
                    }
                }
                mp -= global.item_mana_cost[item];
                
                // Play Fire Sound
                var snd = audio_play_sound(global.item_fire_sound[item], 1, false);
                audio_sound_pitch(snd, random_range(0.95, 1.05));
            }
            
            // Start Cooldown
            if global.item_cooldown[item] != 0 {
                can_shoot_special = false;
                alarm[2] = global.item_cooldown[item];
                global.special_cooldown_max = global.item_cooldown[item];
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go to the nexus

if keyboard_check_pressed(global.nexus_key) {
    if room != rom_nexus {
        scr_nexus();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shoot

var item = obj_controller.inventory_slot[9];

if (can_shoot == true &amp;&amp; obj_controller.show_ui == false &amp;&amp; obj_controller.valid_item[1] == 0 &amp;&amp; item != -1 &amp;&amp; obj_controller.show_info == false) {

    var num = global.item_shot_angle_start[item];
    repeat global.item_shot_number[item] {
    
        // Make shots start in front of you
        var dir = point_direction(x, y, mouse_x, mouse_y) + num;
        var shotx = lengthdir_x(16, dir);
        var inst = instance_create(x, y-16, obj_player_shot);
        
        with inst {
            direction = dir;
            image_angle = direction;
            speed = global.item_shot_speed[item];
            range = global.item_range[item];
            damage = global.item_damage[item];
            sprite_index = global.item_shot_sprite[item];
            num += global.item_shot_angle_increment[item];
            
            // Poison
            if global.item_special[item] == 'Poison' {
                poison_damage = global.item_special_amount[item];
            } else {
                poison_damage = 0;
            }
            
            // Bounce
            if global.item_special[item] == 'Bounces' {
                bounce = global.item_special_amount[item];
            }
            
            // Crit
            var crit_chance = other.crit_chance
            if global.item_special[item] == 'Crit Chance' {
                crit_chance += global.item_special_amount[item];
            }
            if random_range(0, 100) &lt;= crit_chance {
                crit = true;
                damage *= 3;
            }
        }
    }
    
    // Play Fire Sound
    var snd = audio_play_sound(global.item_fire_sound[item], 1, false);
    audio_sound_pitch(snd, random_range(0.8, 1.2));
    
    /// Reset Alarm
    var time = round(30 / (global.item_fire_rate[item] * (rate_of_fire_multiplier / 100)));
    if time &lt; 30 {
        alarm[0] = time;
    } else {
        alarm[0] = 30;
    }
    can_shoot = false;
    global.shots_fired += global.item_shot_number[item];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create View Controller

instance_create(x, y, obj_view_controller);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Shadows

scr_draw_shadow();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Be in water (weird) backpack too

// Backpack
if global.has_backpack {
    draw_sprite_ext(spr_player_backpack, 0, x, y, image_xscale, image_yscale, image_angle, c_white, image_alpha);
}
  
// idk  
if image_xscale = -1 {
    var xx = 32
} else {
    var xx = 0;
}

// idk
if in_water == true {
    draw_sprite_part_ext(sprite_index, image_index, 0, 0, 32, 16, x-16+xx, y, image_xscale, image_yscale, image_blend, image_alpha);
} else {
    draw_self();
}

// Crate Scanner
if global.has_crate_scanner {
    draw_sprite_ext(spr_player_loot_scanner, 0, x, y, image_xscale, image_yscale, image_angle, c_white, image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw HP

if global.player_hp {
    
    var xx = x - 16;
    var yy = y + 4;
    var xxx = x + 16;
    var yyy = y + 8;
    
    // Find hp bar colour
    if invulnerable == true {
        var max_col = c_aqua;
        var min_col = c_aqua;
    } else {
        var max_col = c_lime;
        var min_col = c_red;
    }
    
    draw_healthbar(xx, yy, xxx, yyy, (hp / max_hp) * 100, c_black, min_col, max_col, 0, true, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
