<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_shuriken_shot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initalize Variables

range = 0;
damage = 1;
can_hit = true;
special = 'None';
special_time = 0;
seeking = false;
tracking = false;
first_frame = true;
target = -1;

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset Can Hit

can_hit = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change the depth depending on the y axis

depth = -y
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Particles

var part = scr_find_special_projectile_part(sprite_index)

// Create Particles
if part != -1 {
    if irandom(5) == 0 {
        
        xx = x + lengthdir_x(8, -direction);
        yy = y + lengthdir_y(8, -direction);
    
        var inst = instance_create(xx+random_range(-4, 4), yy+random_range(-4, 4), obj_shot_particle);
        inst.depth = depth;
        inst.direction = direction;
        inst.speed = -4;
        inst.sprite_index = part;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy if out of range

if (point_distance(x, y, xstart, ystart) &gt;= range) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tracking

if (tracking == true &amp;&amp; instance_exists(obj_enemy_parent)) {

    // Initalize Tracking
    if first_frame == true {
        var inst = instance_nearest(x, y, obj_enemy_parent);
        first_frame = false;  
        if point_distance(x, y, inst.x + inst.shot_start_x, inst.y + inst.shot_start_y) &lt; range {
            target = inst;
        }
     }

    if target != -1 &amp;&amp; instance_exists(target) {
    
        // Find New Angle
        var target_dir = point_direction(x, y, target.x + target.shot_start_x, target.y + target.shot_start_y);
        direction += (target_dir - direction) * .1;
        image_angle = direction;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Seeking

if seeking == true {

    // Initalize Seeking
    if first_frame == true {
        first_frame = false;
        targets = 4;
        
        if (instance_exists(obj_enemy_parent) &amp;&amp; point_distance(x, y, instance_nearest(x, y, obj_enemy_parent).x, instance_nearest(x, y, obj_enemy_parent).y) &lt; range) {
            target = instance_nearest(x, y, obj_enemy_parent);
        } else {
            target = -1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Damage Enemy

if can_hit == true &amp;&amp; other.invulnerable == false {
    other.hp -= damage;
    
    // Create Particles
    repeat irandom_range(2, 4) {
        var inst = instance_create(other.x + other.shot_start_x, other.y + other.shot_start_y, obj_particle);
        inst.sprite_index = other.particle_sprite;
    }
    
    // Create Damage Text
    var inst = instance_create(other.x + other.shot_start_x, other.y - (other.sprite_height / 2) + other.shot_start_y, obj_damage_text);
    inst.text = damage;
    
    // Debuff
    switch special {
        case 'Paralyse':
            other.paralyse_alarm = special_time;
            other.paralyse = 0;
            break;
            
        case 'Curse':
            other.cursed_alarm = special_time;
            other.cursed_multiplier = 2;
            break;
            
        case 'Stupefy':
            other.paralyse_alarm = special_time;
            other.stunned_alarm = special_time;
            other.stunned = true;
            other.paralyse = 0;
            break;
            
        case 'Stun':
            other.stunned_alarm = special_time;
            other.stunned = true;
            break;
    }
    
    // Play Impact Sound
    var snd = audio_play_sound(snd_impact_flesh, 1, false);
    audio_sound_pitch(snd, random_range(0.95, 1.05));
    
    can_hit = false;
    alarm[0] = 5;
}

// Destroy if Enemy is Solid
if object_get_solid(other.object_index) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy

if (other.object_index != obj_cracked_emerald_wall || sprite_index != spr_emerald_jackhammer_shot) {
    instance_destroy();
} else {
    
    // Break cracked emerald walls
    instance_destroy(other);
    audio_play_sound(snd_rubble, 1, false);
    
    // Create Particles
    repeat irandom_range(2, 4) {
        var inst = instance_create(other.x, other.y, obj_particle);
        inst.sprite_index =spr_emerald_particle;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
