<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cursor_main</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables

// Destroy if another controller exists
if instance_number(obj_controller) &gt; 1 {
    instance_destroy();
}

randomize();
scr_initalize_weapons();
scr_initialize_bows();
scr_initialize_staffs();
scr_initialize_misc_weapons();
scr_initalize_special();
scr_initialize_medical();
scr_initalize_helmets();
scr_initalize_rings();
scr_initialize_pets();
scr_initialize_potions();
scr_initialize_misc();
scr_initalize_loot_tier_ranges();
scr_initialize_loot_groups();
scr_initialize_crafting_recipes();

// Create the Player in the Nexus
instance_create(320, 240, obj_player);

// Initalize Variables
global.xp = 0;
global.level = 0;
global.kills = 0;
global.shots_fired = 0;
global.level_current = 0;
global.zone_index = 0;
global.background_image_index = 0;
global.save_on_close = true;
global.vault_amount = 126;
global.save_slot = 1;
global.enemy_spawn_rate_multiplier = 1;
global.skin_id = -1;
global.has_backpack = false;
global.has_gps = false;
global.has_oppo = false;
global.has_holster = false;
global.has_special_holster = false;
global.has_helmet_holster = false;
global.has_ring_holster = false;
global.has_crate_scanner = false;
global.hard_mode = false;
global.draw_shadows = true;
global.draw_shadows_soft = true;
global.player_hp = false;
global.cursor = 0;
global.base_defence = 0;
global.base_defence_cap = 20;
global.base_life = 0;
global.base_life_cap = 100;
global.base_mana = 0;
global.base_mana_cap = 100;
global.base_vitality = 0;
global.base_vitality_cap = 20;
global.base_wisdom = 0;
global.base_wisdom_cap = 20;
global.special_cooldown_max = 0;
global.unlocked_emerald_stronghold = false;
global.unlocked_chess_board = false;
global.version = VERSION;
global.cosmic = false;
global.unlocked_zone_1 = true;
global.unlocked_zone_2 = false;
global.unlocked_zone_3 = false;
global.unlocked_zone_4 = false;
global.scanned_crate = -1;

show_ui = false;
show_debug_ui = false;
show_info = false;
crate = -1;
hovered_item = -1;
screenshot_number = 1;
set_bonus_text = -1;
selected_item = -1;
prev_inventory_slot = -1;
prev_pet_slot = -1;
reset_main_room = false;

// Fake Alarms
brawl_alarm = -1;

alarm[0] = 30;
alarm[1] = 10;
alarm[2] = 30;
cursor_sprite = spr_cursor_main;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Inventory

// Backpack
inventory_slot[1] = -1;
inventory_slot[2] = -1;
inventory_slot[3] = -1;
inventory_slot[4] = -1;

// Crate
inventory_slot[5] = -1;
inventory_slot[6] = -1;
inventory_slot[7] = -1;
inventory_slot[8] = -1;

// Equipment
inventory_slot[9] = 0; // Weapon
inventory_slot[10] = -1; // Special
inventory_slot[11] = -1; // Helmet
inventory_slot[12] = -1; // Ring
inventory_slot[13] = -1; // Pets

// Holsters
inventory_slot[18] = -1; // weapon
inventory_slot[19] = -1; // special
inventory_slot[20] = -1; // helmet
inventory_slot[21] = -1; // ring

// Expanded Backpack
inventory_slot[14] = -1;
inventory_slot[15] = -1;
inventory_slot[16] = -1;
inventory_slot[17] = -1;

// Is Item Valid
valid_item[1] = 0;
valid_item[2] = 0;
valid_item[3] = 0;
valid_item[4] = 0;
valid_item[5] = 0;
valid_item[6] = 0; // Holster
valid_item[7] = 0;
valid_item[8] = 0;
valid_item[9] = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Quest Variables

quest_x = 0;
quest_y = 0;
quest_name = -1;

quest_amount[1] = 0;
quest_amount[2] = 0;
quest_amount[3] = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Vault Slots

var num1 = 1;
repeat global.vault_amount {
    var num = 1;
    repeat 4 {
        global.vault_slot[num1, num] = -1;
        num++;
    }
    num1++;
}

// Vault Unlocked
var num = 1;
repeat global.vault_amount {
    global.vault_unlocked[num] = false;
    num++;
}

// Crafter
var num = 1;
repeat 4 {
    global.crafter_slot[num] = -1;
    num++;
}

// Holo Chest
global.holo_chest_slot[1] = -1;
global.holo_chest_slot[2] = -1;
global.holo_chest_slot[3] = -1;
global.holo_chest_slot[4] = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Key Bindings

global.up_key = ord('W');
global.up_key_text = 'W';
global.left_key = ord('A');
global.left_key_text = 'A';
global.down_key = ord('S');
global.down_key_text = 'S';
global.right_key = ord('D');
global.right_key_text = 'D';
global.special_key = vk_space;
global.special_key_text = 'SPACE';
global.inventory_key = ord('E');
global.inventory_key_text = 'E';
global.quests_key = vk_tab;
global.quests_key_text = 'TAB';
global.marker_key = ord('F');
global.marker_key_text = 'F';
global.pause_key = vk_escape;
global.pause_key_text = 'ESCAPE';
global.debug_key = vk_f3;
global.debug_key_text = 'F3';
global.screenshot_key = vk_f5;
global.screenshot_key_text = 'F5';
global.use_key = vk_enter;
global.use_key_text = 'ENTER';
global.nexus_key = ord('R');
global.nexus_key_text = 'R';
global.holster_key = ord('Q')
global.holster_key_text = 'Q'
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initalize Loading Hints

loading_tip[0] = 'You lose half of your levels on death';
loading_tip[1] = 'The Fat Man can drop god tier items';
loading_tip[2] = 'Range is calculated is pixels';
loading_tip[3] = 'One metre is 32 pixels';
loading_tip[4] = 'Poison damage is unaffected by defence';
loading_tip[5] = 'Escaping to the nexus saves the game';
loading_tip[6] = 'Enemies with cyan healhbars are invulnerable';
loading_tip[7] = 'Healing multiplies your vitality by 5';
loading_tip[8] = 'The Quick Buff doubles your speed';
loading_tip_amount = 8;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load

scr_load_character(global.save_slot);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn Enemies

if (room == rom_main || room == rom_netherlands) {

    // Find which zome the player is in
    if (obj_player.x &lt;= 5120) {
        global.zone_index = 1;
    } else if (obj_player.x &lt;= 10240) {
        global.zone_index = 2;
    } else if (obj_player.x &lt;= 15360) {
        global.zone_index = 3;
    } else {
        global.zone_index = 4;
    }
    
    var xx = choose(random_range(view_xview[0] - 320, view_xview[0] - 32), random_range(view_xview + 672, view_xview[0] + 960));
    var yy = choose(random_range(view_yview[0] - 320, view_yview[0] - 32), random_range(view_yview + 512, view_yview[0] + 800));
    
    // Emerald Zone
    if (position_meeting(xx, yy, obj_background_emerald) &amp;&amp; global.zone_index == 3) {
        global.zone_index = 5;
    }
    
    // Netherlands
    if room == rom_netherlands {
        global.zone_index = 6;
    }
    
    // Spawn Enemy
    if (!collision_circle(xx, yy, 32, obj_solid, false, true) &amp;&amp; instance_number(obj_enemy_parent) &lt;= 10) {
    
        // Don't clusterfuck
        if instance_exists(obj_enemy_parent) {
            var n = instance_nearest(xx, yy, obj_enemy_parent);
            if point_distance(xx, yy, n.x, n.y,) &gt; 128 {
                scr_spawn_enemies(xx, yy);
            }
        } else {
            scr_spawn_enemies(xx, yy);
        }
    }
} else {
    global.zone_index = 0;
}

// Reset Alarm
if instance_number(obj_enemy_parent) &lt;= 5 {
    alarm[2] = ceil(10 / global.enemy_spawn_rate_multiplier);
} else {
    alarm[2] = ceil(120 / global.enemy_spawn_rate_multiplier);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Find Background Image Index

if global.background_image_index != 19 {
    global.background_image_index++;
} else {
    global.background_image_index = 0;
}

alarm[1] = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Activate Objects in View

instance_deactivate_object(obj_solid);
instance_deactivate_object(obj_background_stone);
instance_deactivate_object(obj_flower);
instance_activate_region(view_xview[0] - 480, view_yview[0] - 480, view_wview[0] + 960, view_hview[0] + 960, true);
alarm[0] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Find collisions with crates

crate = -1;

with obj_crate_1 {
    if place_meeting(x, y, obj_player) {
        other.crate = id;
    }
}

// Put Crate items in inventory
if (crate != -1) {
    inventory_slot[5] = crate.item[5];
    inventory_slot[6] = crate.item[6];
    inventory_slot[7] = crate.item[7];
    inventory_slot[8] = crate.item[8];
} else {
    inventory_slot[5] = -1;
    inventory_slot[6] = -1;
    inventory_slot[7] = -1;
    inventory_slot[8] = -1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if Items in Equipment slots are valid

// Weapon Slot
if (inventory_slot[9] != -1) {
    if (global.item_type[inventory_slot[9]] != 'weapon') {
        valid_item[1] = 1;
    } else {
        valid_item[1] = 0;
    }
}

// Special Slot
if (inventory_slot[10] != -1) {
    if global.item_type[inventory_slot[10]] != 'throwable' &amp;&amp; global.item_type[inventory_slot[10]] != 'medical' &amp;&amp; global.item_type[inventory_slot[10]] != 'shield' {
        valid_item[2] = 1;
    } else {
        valid_item[2] = 0;
    }
}

// Helmet Slot
if (inventory_slot[11] != -1) {
    if (global.item_type[inventory_slot[11]] != 'helmet') {
        valid_item[3] = 1;
    } else {
        valid_item[3] = 0;
    }
}

// Ring Slot
if (inventory_slot[12] != -1) {
    if (global.item_type[inventory_slot[12]] != 'ring') {
        valid_item[4] = 1;
    } else {
        valid_item[4] = 0;
    }
}

// Pet Slot
if (inventory_slot[13] != -1) {
    if (global.item_type[inventory_slot[13]] != 'pet') {
        valid_item[5] = 1;
    } else {
        valid_item[5] = 0;
    }
}

// Holster
if (inventory_slot[18] != -1) {
    if (global.item_type[inventory_slot[18]] != 'weapon') {
        valid_item[6] = 1;
    } else {
        valid_item[6] = 0;
    }
}

// Special Holster
if (inventory_slot[19] != -1) {
    if global.item_type[inventory_slot[19]] != 'throwable' &amp;&amp; global.item_type[inventory_slot[19]] != 'medical' &amp;&amp; global.item_type[inventory_slot[19]] != 'shield' {
        valid_item[7] = 1;
    } else {
        valid_item[8] = 0;
    }
}

// Helmet Holster
if (inventory_slot[20] != -1) {
    if (global.item_type[inventory_slot[20]] != 'helmet') {
        valid_item[8] = 1;
    } else {
        valid_item[8] = 0;
    }
}

// Ring Holster
if (inventory_slot[21] != -1) {
    if (global.item_type[inventory_slot[21]] != 'ring') {
        valid_item[9] = 1;
    } else {
        valid_item[9] = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Find hovered item

// Initalize Variables
var xx = mouse_x - view_xview[0];
var yy = mouse_y - view_yview[0];

// Find which slot was clicked on
var slot = -1

// Slot One
if (point_in_rectangle(xx, yy, 0, 352, 64, 416)) {
    slot = 1;
}

// Slot Two
if (point_in_rectangle(xx, yy, 64, 352, 128, 416)) {
    slot = 2;
}

// Slot Three
if (point_in_rectangle(xx, yy, 0, 416, 64, 480)) {
    slot = 3;
}

// Slot Four
if (point_in_rectangle(xx, yy, 64, 416, 128, 480)) {
    slot = 4;
}

// Slot Five
if (point_in_rectangle(xx, yy, 512, 352, 576, 416)) {
    slot = 5;
}

// Slot Six
if (point_in_rectangle(xx, yy, 576, 352, 640, 416)) {
    slot = 6;
}

// Slot Seven
if (point_in_rectangle(xx, yy, 512, 416, 576, 480)) {
    slot = 7;
}

// Slot Eight
if (point_in_rectangle(xx, yy, 576, 416, 640, 480)) {
    slot = 8;
}

// Slot 9
if (point_in_rectangle(xx, yy, 192, 416, 256, 480)) {
    slot = 9;
}

// Slot 10
if (point_in_rectangle(xx, yy, 256, 416, 320, 480)) {
    slot = 10;
}

// Slot 11
if (point_in_rectangle(xx, yy, 320, 416, 384, 480)) {
    slot = 11;
}

// Slot 12
if (point_in_rectangle(xx, yy, 384, 416, 448, 480)) {
    slot = 12;
}

// Slot 13
if (point_in_rectangle(xx, yy, 512, 0, 576, 64)) {
    slot = 13;
}

// Expanded Backpack
if global.has_backpack {

    // Slot 14
    if (point_in_rectangle(xx, yy, 0, 224, 64, 288)) {
        slot = 14;
    }
    
    // Slot 15
    if (point_in_rectangle(xx, yy, 64, 224, 128, 288)) {
        slot = 15;
    }
    
    // Slot 16
    if (point_in_rectangle(xx, yy, 0, 288, 64, 356)) {
        slot = 16;
    }
    
    // Slot 17
    if (point_in_rectangle(xx, yy, 64, 288, 128, 356)) {
        slot = 17;
    }
}

// Holster
if global.has_holster {
    if (point_in_rectangle(xx, yy, 128, 416, 192, 480)) {
        slot = 18;
    }
}

// Special Holster
if global.has_special_holster {
    if (point_in_rectangle(xx, yy, 128, 352, 192, 416)) {
        slot = 19;
    }
}

// Helmet Holster
if global.has_helmet_holster {
    if (point_in_rectangle(xx, yy, 448, 352, 512, 416)) {
        slot = 20;
    }
}

// Ring Holster
if global.has_ring_holster {
    if (point_in_rectangle(xx, yy, 448, 416, 512, 480)) {
        slot = 21;
    }
}

hovered_item = slot;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Level up

if global.xp &gt;= 100 {
    global.level++;
    global.level_current++;
    global.xp -= 100;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Toggle Info

if keyboard_check_pressed(global.quests_key) {
    switch show_info {
        case true:
            show_info = false;
            break;
            
        case false:
            show_info = true;
            show_ui = false;
            break;
    }
}

// Toggle UI
if keyboard_check_pressed(global.inventory_key) {
    switch show_ui {
        case true:
            show_ui = false;
            break;
            
        case false:
            show_ui = true;
            show_info = false;
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Toggle Debug UI

if keyboard_check_pressed(global.debug_key) {
    switch show_debug_ui {
        case true:
            show_debug_ui = false;
            break;
            
        case false:
            show_debug_ui = true;
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Pet

if prev_pet_slot != inventory_slot[13] {
    scr_create_pet();
}

prev_pet_slot = inventory_slot[13];
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fake Alarms

// Brawl
if (brawl_alarm &gt; -1) {
    brawl_alarm--;
} else {
    brawl_alarm = -1;
}

if brawl_alarm == -1 {
    if global.enemy_spawn_rate_multiplier != 1 {
        alarm[2] = 20;
        global.enemy_spawn_rate_multiplier = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Swap Holstered Item

// Weapon
if keyboard_check_pressed(ord("1")) &amp;&amp; global.has_holster {
    var temp = inventory_slot[9];
    inventory_slot[9] = inventory_slot[18];
    inventory_slot[18] = temp;
    
    // Play Sound
    if inventory_slot[9] != -1 || inventory_slot[18] != -1 {
        audio_play_sound(snd_holster, 1, false)
    }
}

// Special
if keyboard_check_pressed(ord("2")) &amp;&amp; global.has_special_holster {
    var temp = inventory_slot[10];
    inventory_slot[10] = inventory_slot[19];
    inventory_slot[19] = temp;
    
    // Play Sound
    if inventory_slot[10] != -1 || inventory_slot[19] != -1 {
        var s = audio_play_sound(snd_holster, 1, false);
        audio_sound_pitch(s, 1.25);
    }
}

// Helmet
if keyboard_check_pressed(ord("3")) &amp;&amp; global.has_helmet_holster {
    var temp = inventory_slot[11];
    inventory_slot[11] = inventory_slot[20];
    inventory_slot[20] = temp;
    
    // Play Sound
    if inventory_slot[11] != -1 || inventory_slot[20] != -1 {
        var s = audio_play_sound(snd_holster, 1, false)
        audio_sound_pitch(s, .75);
    }
}

// Ring
if keyboard_check_pressed(ord('4')) &amp;&amp; global.has_ring_holster {
    var temp = inventory_slot[12];
    inventory_slot[12] = inventory_slot[21];
    inventory_slot[21] = temp;
    
    // Play Sound
    if inventory_slot[12] != -1 || inventory_slot[21] != -1 {
        var s = audio_play_sound(snd_holster, 1, false);
        audio_sound_pitch(s, 2);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Find Crates to Scan

if instance_exists(obj_crate_1) and place_meeting(mouse_x, mouse_y, obj_crate_1) {
    global.scanned_crate = instance_nearest(mouse_x, mouse_y, obj_crate_1);
} else {
    global.scanned_crate = -1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Misc

// Place Marker
if keyboard_check_pressed(global.marker_key) {
    instance_destroy(obj_marker);
    instance_create(obj_player.x, obj_player.y, obj_marker);
}

// Take Screenshot
if keyboard_check_pressed(global.screenshot_key) {
    screen_save("Screenshots\Screenshot_"+string(screenshot_number)+".png");
    screenshot_number++;
    audio_play_sound(snd_camera, 1, false);
}

// Make main room not percistent KYS rom_main
if reset_main_room and room == rom_main {
    room_persistent = false;
    room = rom_nexus;
    reset_main_room = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Put item in inventory slot (RETARD MOMENT WHY IS THE SAME CODE 3 TIMES)

if (selected_item != -1) {
    
    // Initalize Variables
    var xx = mouse_x - view_xview[0];
    var yy = mouse_y - view_yview[0];
    
    // Find which slot was clicked on
    var slot = -1
    
    // Slot One
    if (point_in_rectangle(xx, yy, 0, 352, 64, 416)) {
        slot = 1;
    }
    
    // Slot Two
    if (point_in_rectangle(xx, yy, 64, 352, 128, 416)) {
        slot = 2;
    }
    
    // Slot Three
    if (point_in_rectangle(xx, yy, 0, 416, 64, 480)) {
        slot = 3;
    }
    
    // Slot Four
    if (point_in_rectangle(xx, yy, 64, 416, 128, 480)) {
        slot = 4;
    }
    
    // Slot Five
    if (point_in_rectangle(xx, yy, 512, 352, 576, 416)) {
        slot = 5;
    }
    
    // Slot Six
    if (point_in_rectangle(xx, yy, 576, 352, 640, 416)) {
        slot = 6;
    }
    
    // Slot Seven
    if (point_in_rectangle(xx, yy, 512, 416, 576, 480)) {
        slot = 7;
    }
    
    // Slot Eight
    if (point_in_rectangle(xx, yy, 576, 416, 640, 480)) {
        slot = 8;
    }
    
    // Slot 9
    if (point_in_rectangle(xx, yy, 192, 416, 256, 480)) {
        slot = 9;
    }
    
    // Slot 10
    if (point_in_rectangle(xx, yy, 256, 416, 320, 480)) {
        slot = 10;
    }
    
    // Slot 11
    if (point_in_rectangle(xx, yy, 320, 416, 384, 480)) {
        slot = 11;
    }
    
    // Slot 12
    if (point_in_rectangle(xx, yy, 384, 416, 448, 480)) {
        slot = 12;
    }
    
    // Slot 13
    if (point_in_rectangle(xx, yy, 512, 0, 576, 64)) {
        slot = 13;
    }
    
    // Expanded Backpack
    if global.has_backpack == true {
    
        // Slot 14
        if (point_in_rectangle(xx, yy, 0, 224, 64, 288)) {
            slot = 14;
        }
        
        // Slot 15
        if (point_in_rectangle(xx, yy, 64, 224, 128, 288)) {
            slot = 15;
        }
        
        // Slot 16
        if (point_in_rectangle(xx, yy, 0, 288, 64, 356)) {
            slot = 16;
        }
        
        // Slot 17
        if (point_in_rectangle(xx, yy, 64, 288, 128, 356)) {
            slot = 17;
        }
    }
    
    // Holster
    if global.has_holster {
        if (point_in_rectangle(xx, yy, 128, 416, 192, 480)) {
            slot = 18;
        }
    }
    
    // Special Holster
    if global.has_special_holster {
        if (point_in_rectangle(xx, yy, 128, 352, 192, 416)) {
            slot = 19;
        }
    }
    
    // Helmet Holster
    if global.has_helmet_holster {
        if (point_in_rectangle(xx, yy, 448, 352, 512, 416)) {
            slot = 20;
        }
    }
    
    // Ring Holster
    if global.has_ring_holster {
        if (point_in_rectangle(xx, yy, 448, 416, 512, 480)) {
            slot = 21;
        }
    }
    
    if (slot != -1 &amp;&amp; show_ui = true) {
        if (inventory_slot[slot] == -1) {
        
            // Put item in new slot
            inventory_slot[slot] = selected_item;
            
            // Put item in crate
            if (slot &gt;= 5 &amp;&amp; slot &lt;= 8) {
                if (crate != -1) {
                    crate.item[slot] = selected_item;
                } else {
                    scr_drop_item(selected_item);
                }
            }
            selected_item = -1;
            prev_inventory_slot = -1;
        } else {
        
            // Swap Items
            inventory_slot[prev_inventory_slot] = inventory_slot[slot];
            
            // Put item in crate
            if (prev_inventory_slot &gt;= 5 &amp;&amp; prev_inventory_slot &lt;= 8) {
                if (crate != -1) {
                    
                    // Stop Item from Yeeting
                    if inventory_slot[prev_inventory_slot] = -1 {
                        crate.item[prev_inventory_slot] = inventory_slot[slot]; 
                    } else {
                        scr_drop_item(inventory_slot[slot]);
                    }
                } else {
                    scr_drop_item(inventory_slot[slot]);
                }
            }  
            
            inventory_slot[slot] = selected_item;
            
            // Put item in crate
            if (slot &gt;= 5 &amp;&amp; slot &lt;= 8) {
                if (crate != -1) {
                    crate.item[slot] = selected_item;
                } else {
                    scr_drop_item(selected_item);
                }
            }        
            selected_item = -1;
            prev_inventory_slot = -1;
        }
    } else {
        
        // Drag out and Drop Item in Crate
        if (crate == -1) {
            scr_drop_item(selected_item);
            selected_item = -1;
            prev_inventory_slot = -1;
        } else {
            
            // Put Item in existing Crate
            if crate.item[5] == -1 {
                crate.item[5] = selected_item;
                selected_item = -1;
                prev_inventory_slot = -1;
            } else if crate.item[6] == -1 {
                crate.item[6] = selected_item;
                selected_item = -1;
                prev_inventory_slot = -1;
            } else if crate.item[7] == -1 {
                crate.item[7] = selected_item;
                selected_item = -1;
                prev_inventory_slot = -1;
            } else if crate.item[8] == -1 {
                crate.item[8] = selected_item;
                selected_item = -1;
                prev_inventory_slot = -1;
            } else {
            
                // Create New Crate
                var inst = instance_create(obj_player.x, obj_player.y, obj_crate_1);
                inst.item[5] = selected_item;
                selected_item = -1;
                prev_inventory_slot = -1;
                audio_play_sound(snd_crate_drop, 1, false);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Take item from inventory slot (RETARD)

if (show_ui = true) {
    
    // Initalize Variables
    var xx = mouse_x - view_xview[0];
    var yy = mouse_y - view_yview[0];

    // Find which slot was clicked on
    
    // Slot One
    if (point_in_rectangle(xx, yy, 0, 352, 64, 416)) {
        prev_inventory_slot = 1;
    }
    
    // Slot Two
    if (point_in_rectangle(xx, yy, 64, 352, 128, 416)) {
        prev_inventory_slot = 2;
    }
    
    // Slot Three
    if (point_in_rectangle(xx, yy, 0, 416, 64, 480)) {
        prev_inventory_slot = 3;
    }
    
    // Slot Four
    if (point_in_rectangle(xx, yy, 64, 416, 128, 480)) {
        prev_inventory_slot = 4;
    }
    
    // Slot Five
    if (point_in_rectangle(xx, yy, 512, 352, 576, 416)) {
        prev_inventory_slot = 5;
        
        // Remove from Crate
        if (crate != -1) {
            crate.item[5] = -1;
        }
    }
    
    // Slot Six
    if (point_in_rectangle(xx, yy, 576, 352, 640, 416)) {
        prev_inventory_slot = 6;
        
        // Remove from Crate
        if (crate != -1) {
            crate.item[6] = -1;
        }
    }
    
    // Slot Seven
    if (point_in_rectangle(xx, yy, 512, 416, 576, 480)) {
        prev_inventory_slot = 7;
        
        // Remove from Crate
        if (crate != -1) {
            crate.item[7] = -1;
        }
    }
    
    // Slot Eight
    if (point_in_rectangle(xx, yy, 576, 416, 640, 480)) {
        prev_inventory_slot = 8;
        
        // Remove from Crate
        if (crate != -1) {
            crate.item[8] = -1;
        }
    }
    
    // Slot 9
    if (point_in_rectangle(xx, yy, 192, 416, 256, 480)) {
        prev_inventory_slot = 9;
    }
    
    // Slot 10
    if (point_in_rectangle(xx, yy, 256, 416, 320, 480)) {
        prev_inventory_slot = 10;
    }
    
    // Slot 11
    if (point_in_rectangle(xx, yy, 320, 416, 384, 480)) {
        prev_inventory_slot = 11;
    }
    
    // Slot 12
    if (point_in_rectangle(xx, yy, 384, 416, 448, 480)) {
        prev_inventory_slot = 12;
    }
    
    // Slot 13
    if (point_in_rectangle(xx, yy, 512, 0, 576, 64)) {
        prev_inventory_slot = 13;
    }
    
    // Expanded Backpack
    if global.has_backpack == true {
    
        // Slot 14
        if (point_in_rectangle(xx, yy, 0, 224, 64, 288)) {
            prev_inventory_slot = 14;
        }
        
        // Slot 15
        if (point_in_rectangle(xx, yy, 64, 224, 128, 288)) {
            prev_inventory_slot = 15;
        }
        
        // Slot 16
        if (point_in_rectangle(xx, yy, 0, 288, 64, 356)) {
            prev_inventory_slot = 16;
        }
        
        // Slot 17
        if (point_in_rectangle(xx, yy, 64, 288, 128, 356)) {
            prev_inventory_slot = 17;
        }
    }
    
    // Holster
    if global.has_holster {
        if (point_in_rectangle(xx, yy, 128, 416, 192, 480)) {
            prev_inventory_slot = 18;
        }   
    }
    
    // Special Holster
    if global.has_special_holster {
        if (point_in_rectangle(xx, yy, 128, 352, 192, 416)) {
            prev_inventory_slot = 19;
        }   
    }

    
    // Helmet Holster
    if global.has_helmet_holster {
        if (point_in_rectangle(xx, yy, 448, 352, 512, 416)) {
            prev_inventory_slot = 20;
        }   
    }

    // Ring Holster
    if global.has_ring_holster {
        if (point_in_rectangle(xx, yy, 448, 416, 512, 480)) {
            prev_inventory_slot = 21;
        }   
    }


    if (prev_inventory_slot != -1) {
        selected_item = inventory_slot[prev_inventory_slot];
        inventory_slot[prev_inventory_slot] = -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Select Quest

if show_info == true {

    // Marker
    if point_in_rectangle(mouse_x - view_xview[0], mouse_y - view_yview[0], 128, 324, 384, 356) {
        quest_name = 'Marker';
        
        if instance_exists(obj_marker) {
            quest_x = obj_marker.x;
            quest_y = obj_marker.y;
        } else {
            instance_create(obj_player.x, obj_player.y, obj_marker);
            quest_x = obj_marker.x;
            quest_y = obj_marker.y;
        }
    }
    
    // Spectral Crystal
    if point_in_rectangle(mouse_x - view_xview[0], mouse_y - view_yview[0], 128, 356, 384, 388) {
        if instance_exists(obj_spectral_altar) {
            quest_x = obj_spectral_altar.x;
            quest_y = obj_spectral_altar.y;
            quest_name = 'Spectral Altar';
        } else {
            quest_name = -1;
        }
    }
    
    // Emerald Guardian
    if point_in_rectangle(mouse_x - view_xview[0], mouse_y - view_yview[0], 128, 388, 384, 420) {
        if room == rom_main {
            quest_x = 18144;
            quest_y = 9984;
            quest_name = 'Emerald Guardian';
        } else {
            quest_name = -1;
        }
    }
    
    // Chess
    if point_in_rectangle(mouse_x - view_xview[0], mouse_y - view_yview[0], 128, 420, 384, 452) {
        if instance_exists(obj_chess_pressure_plate) {
            quest_x = obj_chess_pressure_plate.x;
            quest_y = obj_chess_pressure_plate.y;
            quest_name = 'Chess Board';
        } else if instance_exists(obj_chess_pressure_plate_locked) {
            quest_x = obj_chess_pressure_plate_locked.x;
            quest_y = obj_chess_pressure_plate_locked.y;
            quest_name = 'Chess Board';
        } else {
            quest_name = -1;        
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Consume Potions

if (show_ui == true &amp;&amp; keyboard_check(vk_shift) &amp;&amp; selected_item != -1 &amp;&amp; global.item_type[selected_item] == 'potion') {
    scr_consume_potion(selected_item)
    selected_item = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset Quest

quest_name = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Pet

scr_create_pet();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stupid Fucking Portal Doesn't like having it's own code

with obj_portal {
    if name == 'Zone 1' &amp;&amp; global.cosmic == true {
        name = 'Cosmic Zone 1'
        image_index = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GUI

draw_sprite(spr_gui_border, 0, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Health and Mana

draw_healthbar(200, 8, 440, 20, (obj_player.hp / obj_player.max_hp) * 100, c_black, make_colour_hsv(75, 255, 255), make_colour_hsv(75, 255, 255), 0, true, true);
draw_healthbar(200, 28, 440, 40, (obj_player.mp / obj_player.max_mp) * 100, c_black, make_colour_hsv(135, 255, 255), make_colour_hsv(135, 255, 255), 0, true, true);

// Draw Text
draw_set_font(fnt_stats_bold);
draw_set_valign(fa_middle);
draw_set_halign(fa_left);
draw_set_colour(make_colour_hsv(75, 255, 100));

draw_text(204, 16, 'HP');

draw_set_colour(make_colour_hsv(135, 255, 100));
draw_text(204, 36, 'MP');

// HP text
draw_set_halign(fa_center);
if global.base_mana == 0 {
    draw_text(320, 36, string(floor(obj_player.mp)) + '/' + string(obj_player.max_mp));
} else {
    if global.base_mana == global.base_mana_cap {
        draw_set_colour(make_colour_rgb(128, 128, 0));
    }
    draw_text(320, 36, string(floor(obj_player.mp)) + '/' + string(obj_player.max_mp) + ' (+' + string(global.base_mana) + ')');
}

draw_set_colour(make_colour_hsv(75, 255, 100));
if global.base_life == 0 {
    draw_text(320, 16, string(floor(obj_player.hp)) + '/' + string(obj_player.max_hp))
} else {
    if global.base_life == global.base_life_cap {
        draw_set_colour(make_colour_rgb(128, 128, 0));
    }
    draw_text(320, 16, string(floor(obj_player.hp)) + '/' + string(obj_player.max_hp) + ' (+' + string(global.base_life) + ')')
}

// Draw Xp Bar
draw_healthbar(200, 52, 440, 56, global.xp, c_black, make_colour_hsv(60, 255, 255), make_colour_hsv(60, 255, 255), 0, true, true);

draw_set_font(fnt_damage);
draw_set_colour(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

draw_sprite(spr_level_number_background, 0, 320, 72);
draw_text(320, 72, global.level);

// Draw Cooldown
if obj_player.can_shoot_special == false and obj_controller.inventory_slot[10] != -1 and global.item_cooldown[obj_controller.inventory_slot[10]] {
    var num = (-(obj_player.alarm[2] - global.special_cooldown_max) / global.special_cooldown_max) * 100
    draw_healthbar(456, 8, 464, 40, num, c_black, c_red, c_yellow, 3, true, true);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Debuff Icons

var xx = 432;

// Poison
if obj_player.poison_amount != 0 {
    draw_sprite(spr_debuff_icon, 0, xx, 72);
    xx -= 16;
}

// Slow
if obj_player.slow_multiplier &lt; 1 {
    draw_sprite(spr_debuff_icon, 1, xx, 72);
    xx -= 16;
}

// Dazed
if obj_player.dexterity_multiplier &lt; 1 {
    draw_sprite(spr_debuff_icon, 4, xx, 72);
    xx -= 16;
}

// Dazed
if obj_player.cursed_multiplier &gt; 1 {
    draw_sprite(spr_debuff_icon, 3, xx, 72);
    xx -= 16;
}

// Sick
if obj_player.sick == true {
    draw_sprite(spr_debuff_icon, 6, xx, 72);
    xx -= 16;
}

// BUFF ICONS
xx = 208;

// Healing
if obj_player.vitality_multiplier &gt; 1 {
    draw_sprite(spr_buff_icon, 0, xx, 72);
    xx += 16;
}

// Invulnerable
if obj_player.invulnerable == true {
    draw_sprite(spr_buff_icon, 1, xx, 72);
    xx += 16;
}

// Berserk
if obj_player.dexterity_multiplier &gt; 1 {
    draw_sprite(spr_buff_icon, 2, xx, 72);
    xx += 16;
}

// Brawl
if global.enemy_spawn_rate_multiplier &gt; 1 {
    draw_sprite(spr_potion_buff_icon, 0, xx, 72);
    xx += 16;
}

// Tranquil
if global.enemy_spawn_rate_multiplier &lt; 1 {
    draw_sprite(spr_potion_buff_icon, 1, xx, 72);
    xx += 16;
}

// Quick
if obj_player.slow_multiplier &gt; 1 {
    draw_sprite(spr_buff_icon, 3, xx, 72);
    xx += 16;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Inventory

if (show_ui == true) {
    
    draw_set_font(fnt_damage);
    draw_set_colour(c_white);
    draw_set_valign(fa_bottom);
    draw_set_halign(fa_left);
    
    // Draw Backpack
    if global.has_backpack == true {
        draw_text(8, 224, 'Backpack');
    } else {
        draw_text(8, 352, 'Backpack');
    }
    
    // Slot 1
    draw_sprite(spr_inventory_slot, 0, 0, 352);
    if (inventory_slot[1] != -1) {
        draw_sprite(global.item_sprite[inventory_slot[1]], 0, 32, 384);
    }
    
    // Slot 2
    draw_sprite(spr_inventory_slot, 0, 64, 352);
    if (inventory_slot[2] != -1) {
        draw_sprite(global.item_sprite[inventory_slot[2]], 0, 96, 384);
    }
    
    // Slot 3
    draw_sprite(spr_inventory_slot, 0, 0, 416);
    if (inventory_slot[3] != -1) {
        draw_sprite(global.item_sprite[inventory_slot[3]], 0, 32, 448);
    }
    
    // Slot 4
    draw_sprite(spr_inventory_slot, 0, 64, 416);
    if (inventory_slot[4] != -1) {
        draw_sprite(global.item_sprite[inventory_slot[4]], 0, 96, 448);
    }
    
    // Expanded
    if global.has_backpack == true {
    
        // Slot 14
        draw_sprite(spr_inventory_slot, 0, 0, 224);
        if (inventory_slot[14] != -1) {
            draw_sprite(global.item_sprite[inventory_slot[14]], 0, 32, 256);
        }
        
        // Slot 15
        draw_sprite(spr_inventory_slot, 0, 64, 224);
        if (inventory_slot[15] != -1) {
            draw_sprite(global.item_sprite[inventory_slot[15]], 0, 96, 256);
        }
        
        // Slot 16
        draw_sprite(spr_inventory_slot, 0, 0, 288);
        if (inventory_slot[16] != -1) {
            draw_sprite(global.item_sprite[inventory_slot[16]], 0, 32, 320);
        }
        
        // Slot 17
        draw_sprite(spr_inventory_slot, 0, 64, 288);
        if (inventory_slot[17] != -1) {
            draw_sprite(global.item_sprite[inventory_slot[17]], 0, 96, 320);
        }
    }
    
    // Draw Crate
    draw_text(520, 352, 'Crate');
    
    // Slot 5
    draw_sprite(spr_inventory_slot, 0, 512, 352);
    if (inventory_slot[5] != -1) {
        draw_sprite(global.item_sprite[inventory_slot[5]], 0, 544, 384);
    }
    
    // Slot 6
    draw_sprite(spr_inventory_slot, 0, 576, 352);
    if (inventory_slot[6] != -1) {
        draw_sprite(global.item_sprite[inventory_slot[6]], 0, 608, 384);
    }
    
    // Slot 7
    draw_sprite(spr_inventory_slot, 0, 512, 416);
    if (inventory_slot[7] != -1) {
        draw_sprite(global.item_sprite[inventory_slot[7]], 0, 544, 448);
    }
    
    // Slot 8
    draw_sprite(spr_inventory_slot, 0, 576, 416);
    if (inventory_slot[8] != -1) {
        draw_sprite(global.item_sprite[inventory_slot[8]], 0, 608, 448);
    }
    
    // Draw Equipment
    draw_text(200, 416, 'Equipment');
    
    // Slot 9
    if (inventory_slot[9] != -1) {
        draw_sprite(spr_inventory_slot, valid_item[1], 192, 416);
        draw_sprite(global.item_sprite[inventory_slot[9]], 0, 224, 448);
    } else {
        draw_sprite(spr_inventory_slot, 2, 192, 416);
    }
    
    // Slot 10
    if (inventory_slot[10] != -1) {
        draw_sprite(spr_inventory_slot, valid_item[2], 256, 416);
        draw_sprite(global.item_sprite[inventory_slot[10]], 0, 288, 448);
    } else {
        draw_sprite(spr_inventory_slot, 3, 256, 416);
    }
    
    // Slot 11
    if (inventory_slot[11] != -1) {
        draw_sprite(spr_inventory_slot, valid_item[3], 320, 416);
        draw_sprite(global.item_sprite[inventory_slot[11]], 0, 352, 448);
    } else {
        draw_sprite(spr_inventory_slot, 4, 320, 416);
    }
    
    // Slot 12
    if (inventory_slot[12] != -1) {
        draw_sprite(spr_inventory_slot, valid_item[4], 384, 416);
        draw_sprite(global.item_sprite[inventory_slot[12]], 0, 416, 448);
    } else {
        draw_sprite(spr_inventory_slot, 5, 384, 416);
    }
    
    // Slot 13
    if (inventory_slot[13] != -1) {
        draw_sprite(spr_inventory_slot, valid_item[5], 512, 0);
        draw_sprite(global.item_sprite[inventory_slot[13]], 0, 544, 32);
    } else {
        draw_sprite(spr_inventory_slot, 6, 512, 0);
    }
    
    // Getting shit ready
    draw_set_font(fnt_aliasing);
    draw_set_colour(c_white);
    draw_set_halign(fa_middle);
    draw_set_valign(fa_center);
    var n = 16;
    
    // Slot 18 (Holster)
    if global.has_holster {
        if (inventory_slot[18] != -1) {
            draw_sprite(spr_inventory_slot, valid_item[6], 128, 416);
            draw_sprite(global.item_sprite[inventory_slot[18]], 0, 160, 448);
            draw_text(128+n, 416+n, "1");
        } else {
            draw_sprite(spr_inventory_slot, 2, 128, 416);
        }
    }
    
    // Slot 19 (Special Holster)
    if global.has_special_holster {
        if (inventory_slot[19] != -1) {
            draw_sprite(spr_inventory_slot, valid_item[7], 128, 352);
            draw_sprite(global.item_sprite[inventory_slot[19]], 0, 160, 384);
            draw_text(128+n, 352+n, "2");
        } else {
            draw_sprite(spr_inventory_slot, 3, 128, 352);
        }
    }
    
    // Slot 20 (Helmet Holster)
    if global.has_helmet_holster {
        if (inventory_slot[20] != -1) {
            draw_sprite(spr_inventory_slot, valid_item[8], 448, 352);
            draw_sprite(global.item_sprite[inventory_slot[20]], 0, 480, 384);
            draw_text(448+n, 352+n, "3");
        } else {
            draw_sprite(spr_inventory_slot, 4, 448, 352);
        }
    }
    
    // Slot 21 (Ring Holster)
    if global.has_ring_holster {
        if (inventory_slot[21] != -1) {
            draw_sprite(spr_inventory_slot, valid_item[9], 448, 416);
            draw_sprite(global.item_sprite[inventory_slot[21]], 0, 480, 448);
            draw_text(448+n, 416+n, "4");
        } else {
            draw_sprite(spr_inventory_slot, 5, 448, 416);
        }
    }
    
    // Draw Selected Item
    
    var xx = mouse_x - view_xview[0];
    var yy = mouse_y - view_yview[0];
    
    if (selected_item != -1) {
        draw_sprite(global.item_sprite[selected_item], 0, xx, yy)
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Info

if show_info == true {
    draw_set_font(fnt_damage);
    draw_set_colour(c_white);
    draw_set_valign(fa_bottom);
    draw_set_halign(fa_left);
    
    // Draw Compass
    draw_text(8, 320, 'Compass');
    draw_sprite(spr_compass_background, 0, 0, 320);
    
    if quest_name != -1 {
        draw_sprite_ext(spr_compass_pointer, 0, 64, 384, 1, 1, point_direction(obj_player.x, obj_player.y, quest_x, quest_y), c_white, 1);
        
        draw_set_font(fnt_stats_bold);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);       
        draw_text(64, 448, quest_name);
        draw_set_font(fnt_stats);
        draw_text(64, 464, string(round(point_distance(obj_player.x, obj_player.y, quest_x, quest_y) / 32)) + 'm');
    } else {
        draw_set_font(fnt_stats_bold);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);       
        draw_text(64, 448, 'Select a Quest');
    }
    
    // Draw Quest
    draw_set_font(fnt_damage);
    draw_set_valign(fa_bottom);
    draw_set_halign(fa_left);
    
    draw_text(136, 320, 'Quests');
    draw_sprite(spr_quest_background, 0, 128, 320);
    
    // Marker
    draw_set_font(fnt_stats_bold);
    draw_set_valign(fa_middle);
    draw_text(144, 340, 'Marker'); 
    draw_set_font(fnt_stats);
    draw_text(144, 356, 'Place a Marker');
    
    // Crystal
    draw_set_font(fnt_stats_bold);
    draw_text(144, 372, 'Spectral Crystal');
    draw_set_font(fnt_stats);
    draw_text(144, 388, 'Kill Crystal Scouts ' + string(quest_amount[1]) + '/10');
        
    // Emerald Guardian
    draw_set_font(fnt_stats_bold);
    draw_text(144, 404, 'Emerald Guardian');
    draw_set_font(fnt_stats);
    draw_text(144, 420, 'Kill Temple Guardians ' + string(quest_amount[2]) + '/2');
    
    // Chess Things
    draw_set_font(fnt_stats_bold);
    draw_text(144, 436, 'Chess Things');
    draw_set_font(fnt_stats);
    draw_text(144, 452, 'Kill Spectral Crystal ' + string(quest_amount[3]) + '/1');
    
    // Draw GPS
    if global.has_gps == true {
        draw_set_font(fnt_damage);
        draw_set_colour(c_white);
        draw_set_valign(fa_bottom);
        draw_set_halign(fa_left);
        
        draw_text(456, 224, 'GPS');
        draw_sprite(spr_gps_background, 0, 448, 224);
        if room == rom_main {
            if global.cosmic == true {
                draw_sprite(spr_gps_screen, 2, 464, 240); 
            } else {
                draw_sprite(spr_gps_screen, 0, 464, 240);
            }
            
            draw_set_halign(fa_center);
            draw_set_valign(fa_middle);
            draw_set_colour(c_red);
            draw_set_font(fnt_item_name);
            draw_text(464 + (obj_player.x / 128), 240 + (obj_player.y / 128), 'K'); 
        } else {
            draw_sprite(spr_gps_screen, 1, 464, 240);
        }
        
        draw_set_font(fnt_stats);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_set_colour(c_white);      
        draw_text(544, 432, 'Player x: ' + string(round(obj_player.x / 32)) + 'm');
        draw_text(544, 448, 'Player y: ' + string(round(obj_player.y / 32)) + 'm');
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Item Stats

if (show_ui == true &amp;&amp; hovered_item != -1 &amp;&amp; selected_item == -1 &amp;&amp; inventory_slot[hovered_item] != -1) {

    var item = inventory_slot[hovered_item];
    draw_set_colour(c_white);
    draw_set_halign(fa_left);
    draw_set_valign(fa_center);           
    draw_set_font(fnt_item_name);

    switch global.item_type[item] {
        
        // Weapon
        case 'weapon':
            draw_sprite(spr_stat_background, 0, 0, 0);
            draw_text(16, 24, global.item_name[item]);     
            draw_set_font(fnt_stats_bold);
            
            // Draw Tier
            if (global.item_tier[item] == 'god') {
                draw_set_colour(c_yellow);
                draw_text(16, 40, 'God Tier Weapon');
            } else if global.item_tier[item] == 'untiered' {
                draw_text(16, 40, 'Untiered Weapon');
            } else if global.item_tier[item] == 'psi' {
                draw_set_colour(make_colour_rgb(170, 85, 255));
                draw_text(16, 40, 'Ψ Tier Weapon');
            } else if global.item_tier[item] == 'collector' {
                draw_set_colour(c_red);
                draw_text(16, 40, "Collector's Weapon");
            } else {
                draw_text(16, 40, 'Tier ' + string(global.item_tier[item]) + ' Weapon');
            }
            
            draw_set_colour(c_white);
            draw_set_font(fnt_stats);
            draw_text(16, 64, 'Damage: ' + string(global.item_damage[item]));
            draw_text(16, 80, 'Range: ' + string(global.item_range[item]));
            draw_text(16, 96, 'Fire Rate: ' + string(global.item_fire_rate[item]));
            draw_text(16, 112, 'Projectile Speed: ' + string(global.item_shot_speed[item]));
            draw_text(16, 128, 'Shots: ' + string(global.item_shot_number[item]));
            
            // Draw Special
            if global.item_special[item] != 'None' {
                draw_text(16, 144, string(global.item_special[item]) + ': ' + string(global.item_special_amount[item]));
            }
            break;
            
        // Medical
        case 'medical':
            draw_sprite(spr_stat_background, 0, 0, 0);   
            draw_text(16, 24, global.item_name[item]);     
            draw_set_font(fnt_stats_bold);
            
            // Draw Tier
            if (global.item_tier[item] == 'god') {
                draw_set_colour(c_yellow);
                draw_text(16, 40, 'God Tier Special');
            } else if global.item_tier[item] == 'psi' {
                draw_set_colour(make_colour_rgb(170, 85, 255));
                draw_text(16, 40, 'Ψ Tier Special');
            } else if global.item_tier[item] == 'collector' {
                draw_set_colour(c_red);
                draw_text(16, 40, "Collector's Medical");
            } else {
                draw_text(16, 40, 'Tier ' + string(global.item_tier[inventory_slot[hovered_item]]) + ' Special');
            }
            
            draw_set_colour(c_white);
            draw_set_font(fnt_stats);
            draw_text(16, 64, 'Mana Cost: ' + string(global.item_mana_cost[inventory_slot[hovered_item]]));
            var yy = 80
            
            // Health
            if global.item_health[inventory_slot[hovered_item]] != 0 {
                draw_text(16, yy, 'Health: ' + string(global.item_health[inventory_slot[hovered_item]]));
                yy += 16;
            }
            
            // Draw Special
            if global.item_special[item] != 'None' &amp;&amp; global.item_special[item] != 'Summon' {
                draw_text(16, yy, 'Effect: ' + string(global.item_special[inventory_slot[hovered_item]]));
                draw_text(16, yy+16, 'for ' + string(global.item_special_amount[inventory_slot[hovered_item]] / 30) + ' seconds');
                yy += 32;
            } else if global.item_special[item] == 'Summon' {
            
                // Fucked Summons
                var fuck = instance_create(0, 0, global.item_special_amount[item])
                draw_text(16, yy, 'Summons a ' + fuck.name);
                draw_text(16, yy+16, 'that does ' + string(round(fuck.damage * fuck.fire_rate * fuck.shot_number)) + ' DPS');
                draw_text(16, yy+32, 'for ' + string(fuck.alarm[2] / 30) + ' seconds');
                yy += 48
                instance_destroy(fuck);
            }
            
            // Draw Cooldown
            if global.item_cooldown[inventory_slot[hovered_item]] != 0 {
                draw_text(16, yy, 'Cooldown: ' + string(global.item_cooldown[item] / 30) + ' seconds');
                yy += 16;
            }
            break;
            
        // Throwable
        case 'throwable':
            draw_sprite(spr_stat_background, 0, 0, 0);
            draw_text(16, 24, global.item_name[inventory_slot[hovered_item]]);     
            draw_set_font(fnt_stats_bold);
            
            // Draw Tier
            if (global.item_tier[inventory_slot[hovered_item]] == 'god') {
                draw_set_colour(c_yellow);
                draw_text(16, 40, 'God Tier Special');
            } else if global.item_tier[item] == 'untiered' {
                draw_text(16, 40, 'Untiered Special');
            } else if global.item_tier[item] == 'psi' {
                draw_set_colour(make_colour_rgb(170, 85, 255));
                draw_text(16, 40, 'Ψ Tier Special');
            } else if global.item_tier[item] == 'collector' {
                draw_set_colour(c_red);
                draw_text(16, 40, "Collector's Thowable");
            } else {
                draw_text(16, 40, 'Tier ' + string(global.item_tier[item]) + ' Special');
            }
            
            draw_set_colour(c_white);
            draw_set_font(fnt_stats);
            draw_text(16, 64, 'Damage: ' + string(global.item_damage[inventory_slot[hovered_item]]));
            draw_text(16, 80, 'Range: ' + string(global.item_range[inventory_slot[hovered_item]]));
            draw_text(16, 96, 'Projectile Speed: ' + string(global.item_shot_speed[inventory_slot[hovered_item]]));
            draw_text(16, 112, 'Shots: ' + string(global.item_shot_number[inventory_slot[hovered_item]]));
            draw_text(16, 128, 'Mana Cost: ' + string(global.item_mana_cost[inventory_slot[hovered_item]]));
            
            // Draw Special
            if global.item_special[inventory_slot[hovered_item]] != 'None' {
                draw_text(16, 144, 'Effect: ' + string(global.item_special[inventory_slot[hovered_item]]));
                draw_text(16, 160, 'for ' + string(global.item_special_amount[inventory_slot[hovered_item]] / 30) + ' seconds');
            }
            
            // Emerald Jackhammer
            if item == 1331 {
                draw_text(16, 144, 'Breaks cracked');
                draw_text(16, 160, 'emerald walls');
            }
            break;
            
        // Shield
        case 'shield':
            draw_sprite(spr_stat_background, 0, 0, 0);
            draw_text(16, 24, global.item_name[inventory_slot[hovered_item]]);     
            draw_set_font(fnt_stats_bold);
            
            // Draw Tier
            if (global.item_tier[inventory_slot[hovered_item]] == 'god') {
                draw_set_colour(c_yellow);
                draw_text(16, 40, 'God Tier Special');
            } else if global.item_tier[item] == 'psi' {
                draw_set_colour(make_colour_rgb(170, 85, 255));
                draw_text(16, 40, 'Ψ Tier Special');
            } else if global.item_tier[item] == 'collector' {
                draw_set_colour(c_red);
                draw_text(16, 40, "Collector's Shield");
            } else {
                draw_text(16, 40, 'Tier ' + string(global.item_tier[inventory_slot[hovered_item]]) + ' Special');
            }
            
            draw_set_colour(c_white);
            draw_set_font(fnt_stats);
            draw_text(16, 64, 'Damage: ' + string(global.item_damage[inventory_slot[hovered_item]]));
            draw_text(16, 80, 'Range: ' + string(global.item_range[inventory_slot[hovered_item]]));
            draw_text(16, 96, 'Projectile Speed: ' + string(global.item_shot_speed[inventory_slot[hovered_item]]));
            draw_text(16, 112, 'Angle: ' + string(global.item_shot_angle_start[inventory_slot[hovered_item]] * -2));
            draw_text(16, 128, 'Mana Cost: ' + string(global.item_mana_cost[inventory_slot[hovered_item]]));
            
            // Draw Special
            if global.item_special[inventory_slot[hovered_item]] != 'None' {
                draw_text(16, 144, 'Effect: ' + string(global.item_special[inventory_slot[hovered_item]]));
                draw_text(16, 160, 'for ' + string(global.item_special_amount[inventory_slot[hovered_item]] / 30) + ' seconds');
            }
            break;
            
        // Helmet
        case 'helmet':
            draw_sprite(spr_stat_background, 0, 0, 0);   
            draw_text(16, 24, global.item_name[item]);     
            draw_set_font(fnt_stats_bold);
            
            // Draw Tier
            if (global.item_tier[item] == 'god') {
                draw_set_colour(c_yellow);
                draw_text(16, 40, 'God Tier Helmet');
            } else if global.item_tier[item] == 'psi' {
                draw_set_colour(make_colour_rgb(170, 85, 255));
                draw_text(16, 40, 'Ψ Tier Helmet');
            } else if global.item_tier[item] == 'collector' {
                draw_set_colour(c_red);
                draw_text(16, 40, "Collector's Helmet");
            } else {
                draw_text(16, 40, 'Tier ' + string(global.item_tier[item]) + ' Helmet');
            }
            
            draw_set_colour(c_white);
            draw_set_font(fnt_stats);
            var yy = 64;
            
            // Defence
            if global.item_defence[item] != 0 {
                draw_text(16, yy, 'Defence: ' + string(global.item_defence[item]));
                yy += 16;
            }
            
            // Speed
            if global.item_speed[item] != 0 {
                draw_text(16, yy, 'Speed: ' + string(global.item_speed[item]));
                yy += 16;
            }
            
            // Dexterity
            if global.item_dexterity[item] != 100 {
                draw_text(16, yy, 'Rate of Fire: ' + string(global.item_dexterity[item]) + '%');
                yy += 16;
            }
            
            // Wisdom
            if global.item_wisdom[item] != 0 {
                draw_text(16, yy, 'Wisdom: ' + string(global.item_wisdom[item]));
                yy += 16;
            }
            
            // Vitality
            if global.item_vitality[item] != 0 {
                draw_text(16, yy, 'Vitality: ' + string(global.item_vitality[item]));
                yy += 16;
            }
            
            // Thorns
            if global.item_thorns[item] != 0 {
                draw_text(16, yy, 'Thorns Damage: ' + string(global.item_thorns[item]));
                yy += 16;
            }
            
            // Snake Skin Helmet
            if item == 1314 {
                draw_text(16, yy, 'Immunity to Poison');
                yy += 16;
            }
            break;
            
        // Ring
        case 'ring':
            draw_sprite(spr_stat_background, 0, 0, 0);   
            draw_text(16, 24, global.item_name[inventory_slot[hovered_item]]);     
            draw_set_font(fnt_stats_bold);
            
            // Draw Tier
            if (global.item_tier[inventory_slot[hovered_item]] == 'god') {
                draw_set_colour(c_yellow);
                draw_text(16, 40, 'God Tier Ring');
            } else if global.item_tier[item] == 'psi' {
                draw_set_colour(make_colour_rgb(170, 85, 255));
                draw_text(16, 40, 'Ψ Tier Ring');
            } else if global.item_tier[item] == 'collector' {
                draw_set_colour(c_red);
                draw_text(16, 40, "Collector's Ring");
            } else {
                draw_text(16, 40, 'Tier ' + string(global.item_tier[inventory_slot[hovered_item]]) + ' Ring');
            }
            
            draw_set_colour(c_white);
            
            draw_set_font(fnt_stats);
            var yy = 64;
            
            // Speed
            if global.item_speed[inventory_slot[hovered_item]] != 0 {
                draw_text(16, yy, 'Speed: ' + string(global.item_speed[inventory_slot[hovered_item]]));
                yy += 16;
            }
            
            // Vitality
            if global.item_vitality[inventory_slot[hovered_item]] != 0 {
                draw_text(16, yy, 'Vitality: ' + string(global.item_vitality[inventory_slot[hovered_item]]));
                yy += 16;
            }
            
            // Wisdom
            if global.item_wisdom[inventory_slot[hovered_item]] != 0 {
                draw_text(16, yy, 'Wisdom: ' + string(global.item_wisdom[inventory_slot[hovered_item]]));
                yy += 16;
            }
            
            // Dexterity
            if global.item_dexterity[inventory_slot[hovered_item]] != 100 {
                draw_text(16, yy, 'Rate of Fire: ' + string(global.item_dexterity[inventory_slot[hovered_item]]) + '%');
                yy += 16;
            }
            
            // Defence
            if global.item_defence[inventory_slot[hovered_item]] != 0 {
                draw_text(16, yy, 'Defence: ' + string(global.item_defence[item]));
                yy += 16;
            }
            
            // Health
            if global.item_health[item] != 0 {
                draw_text(16, yy, 'Max Health: +' + string(global.item_health[item]));
                yy += 16;
            }
            
            // Mana
            if global.item_mana[item] != 0 {
                draw_text(16, yy, 'Max Mana: +' + string(global.item_mana[item]));
                yy += 16;
            }
            
            // Crit Chance
            if global.item_crit_chance[item] != 0 {
                draw_text(16, yy, 'Crit Chance: ' + string(global.item_crit_chance[item]) + '%');
                yy += 16;
            }
            break;
            
        // Pet
        case 'pet':
            draw_sprite(spr_stat_background, 0, 0, 0);
            draw_text(16, 24, global.item_name[item]);     
            draw_set_font(fnt_stats_bold);
            
            // Draw Tier
            if (global.item_tier[item] == 'god') {
                draw_set_colour(c_yellow);
                draw_text(16, 40, 'God Tier Egg');
            } else if global.item_tier[item] == 'psi' {
                draw_set_colour(make_colour_rgb(170, 85, 255));
                draw_text(16, 40, 'Ψ Tier Egg');
            } else if global.item_tier[item] == 'collector' {
                draw_set_colour(c_red);
                draw_text(16, 40, "Collector's Egg");
            } else {
                draw_text(16, 40, 'Tier ' + string(global.item_tier[item]) + ' Egg');
            }
            
            draw_set_colour(c_white);
            
            draw_set_font(fnt_stats);
            if (global.item_health[item] == 0 &amp;&amp; global.item_mana[item] == 0) {
                draw_text(16, 64, 'Damage: ' + string(global.item_damage[item]));
                draw_text(16, 80, 'Range: ' + string(global.item_range[item]));
                draw_text(16, 96, 'Fire Rate: ' + string(global.item_fire_rate[item]));
                draw_text(16, 112, 'Projectile Speed: ' + string(global.item_shot_speed[item]));
                draw_text(16, 128, 'Shots: ' + string(global.item_shot_number[item]));
                
                // Draw Special
                if global.item_special[item] == 'Crit Chance' or global.item_special[item] == 'Poison' {
                    draw_text(16, 144, string(global.item_special[item]) + ': ' + string(global.item_special_amount[item]));
                } else if global.item_special[item] != 'None' {
                    draw_text(16, 144, 'Effect: ' + string(global.item_special[item]));
                    draw_text(16, 160, 'for ' + string(global.item_special_amount[item] / 30) + ' seconds');
                }
            } else {
            
                // Health and Mana
                var yy = 64;
                if global.item_health[item] != 0 {
                    draw_text(16, yy, string(global.item_health[item]) + ' Health');
                    yy += 16;
                }
                if global.item_mana[item] != 0 {
                    draw_text(16, yy, string(global.item_mana[item]) + ' Mana');
                    yy += 16;
                }
                draw_text(16, yy, 'every 3 Seconds');
                yy += 16
            }
            break;
            
        // Potion
        case 'potion':
            draw_sprite(spr_stat_background, 0, 0, 0);   
            draw_text(16, 24, global.item_name[item]);     
            
            // Draw Tier
            draw_set_font(fnt_stats_bold);
            draw_text(16, 40, 'Untiered Consumable');
            
            draw_set_font(fnt_stats);
            var yy = 64;
            draw_text(16, yy, global.item_description[item]);
            yy += 16;
            if !(global.item_amount[item] = -1 || global.item_effect[item] == 'Skin' || global.item_effect[item] == 'Mana Mushroom' || global.item_effect[item] == 'Life Mushroom' || global.item_effect[item] == 'Defence Mushroom' || global.item_effect[item] == 'Wisdom Mushroom' || global.item_effect[item] == 'Vitality Mushroom' || global.item_effect[item] == 'Chest' || global.item_effect[item] == 'Levels' || global.item_effect[item] == "Holster")  {
                draw_text(16, yy, 'for ' + string(global.item_amount[item] / 1800) + ' minutes');
                yy += 16;
            }
            draw_set_font(fnt_stats_bold);
            draw_text(16, yy, 'Shift-Click to use');
            break;
            
        // Material
        case 'material':
            draw_sprite(spr_stat_background, 0, 0, 0);   
            draw_text(16, 24, global.item_name[item]);     
            
            // Draw Tier
            draw_set_font(fnt_stats_bold);
            if global.item_tier[item] == 'collector' {
                draw_set_colour(c_red);
                draw_text(16, 40, "Collector's Material");
            } else {
                draw_text(16, 40, 'Untiered Material');
            }
            break;
            
        // Trophy
        case 'trophy':
            draw_sprite(spr_stat_background, 0, 0, 0);   
            draw_text(16, 24, global.item_name[item]);     
            
            // Draw Tier
            draw_set_font(fnt_stats_bold);
            if global.item_tier[item] == 'collector' {
                draw_set_colour(c_red);
                draw_text(16, 40, "Collector's Trophy");
            }
            draw_set_font(fnt_stats);
            draw_set_colour(c_white);
            var yy = 64;
            draw_text(16, yy, global.item_description[item]);
            yy += 16;
            draw_text(16, yy, global.item_description2[item]);
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Player Stats en Upgrades

if (show_ui == true) {

    if (point_in_rectangle(mouse_x - view_xview[0], mouse_y - view_yview[0], 576, 0, 640, 64)) {
    
        // Draw Player Stats
        draw_sprite(spr_stat_background, 0, 0, 0);   
        draw_set_colour(c_white);
        draw_set_halign(fa_left);
        draw_set_valign(fa_center);           
        draw_set_font(fnt_damage);
        draw_text(16, 24, 'Mr Konji');     
        draw_set_font(fnt_stats);
        draw_text(16, 48, 'Rate of Fire: %' + string(obj_player.rate_of_fire_multiplier));
        
        // Vit
        if global.base_vitality &gt;= global.base_vitality_cap {
            draw_set_colour(c_yellow);
        }
        if global.base_vitality == 0 {
            draw_text(16, 64, 'Vitality: ' + string(obj_player.vitality));
        } else {
            draw_text(16, 64, 'Vitality: ' + string(obj_player.vitality) + ' (+' + string(global.base_vitality) + ')');
        }
        draw_set_colour(c_white);
        
        // Wis
        if global.base_wisdom &gt;= global.base_wisdom_cap {
            draw_set_colour(c_yellow);
        }
        if global.base_wisdom == 0 {
            draw_text(16, 80, 'Wisdom: ' + string(obj_player.wisdom));
        } else {
            draw_text(16, 80, 'Wisdom: ' + string(obj_player.wisdom) + ' (+' + string(global.base_wisdom) + ')');
        }
        draw_set_colour(c_white);
        
        // Speed
        draw_text(16, 96, 'Speed: ' + string(round(obj_player.spd)));
        
        // Defence
        if global.base_defence &gt;= global.base_defence_cap {
            draw_set_colour(c_yellow);
        }
        if global.base_defence == 0 {
            draw_text(16, 112, 'Defence: ' + string(obj_player.defence));
        } else {
            draw_text(16, 112, 'Defence: ' + string(obj_player.defence) + ' (+' + string(global.base_defence) + ')');
        }
        draw_set_colour(c_white);
        
        // Crit Chance
        draw_text(16, 128, 'Crit Chance: %' + string(round(obj_player.crit_chance)));
    }
    
    // Draw Button
    draw_sprite(spr_stats_button, 0, 576, 0);
    
    // Draw Upgrades
    draw_sprite(spr_upgrades_button, 0, 448, 0);
    
    if (point_in_rectangle(mouse_x - view_xview[0], mouse_y - view_yview[0], 448, 0, 512, 64)) {
    
        // Draw Upgrade Info
        draw_sprite(spr_stat_background, 0, 0, 0);   
        draw_set_colour(c_white);
        draw_set_halign(fa_left);
        draw_set_valign(fa_center);           
        draw_set_font(fnt_damage);
        draw_text(16, 24, 'Upgrades');
        
            // Getting shit ready
        draw_set_font(fnt_aliasing);
        draw_set_halign(fa_middle);
            
        // GPS
        if global.has_gps == true {
            draw_sprite_ext(spr_gps, 0, 32, 64, 1, 1, 0, c_white, 1);
        } else {
            draw_sprite_ext(spr_gps, 0, 32, 64, 1, 1, 0, c_black, .5);
        }
        
        // Backpack
        if global.has_backpack == true {
            draw_sprite_ext(spr_backpack_expander, 0, 64, 64, 1, 1, 0, c_white, 1);
        } else {
            draw_sprite_ext(spr_backpack_expander, 0, 64, 64, 1, 1, 0, c_black, .5);
        }
        
        // Oppo
        if global.has_oppo == true {
            draw_sprite_ext(spr_oppo, 0, 96, 64, 1, 1, 0, c_white, 1);
            draw_text(96, 88, "[F]");
        } else {
            draw_sprite_ext(spr_oppo, 0, 96, 64, 1, 1, 0, c_black, .5);
        }
        
        // Crate Scanner
        if global.has_crate_scanner == true {
            draw_sprite_ext(spr_crate_scanner, 0, 128, 64, 1, 1, 0, c_white, 1);
            draw_text(128, 88, "[Ctrl]");
        } else {
            draw_sprite_ext(spr_crate_scanner, 0, 128, 64, 1, 1, 0, c_black, .5);
        }
        
        // Cosmic
        if global.cosmic == true {
            draw_sprite_ext(spr_cosmic_magnet, 0, 160, 64, 1, 1, 0, c_white, 1);
        } else {
            draw_sprite_ext(spr_cosmic_magnet, 0, 160, 64, 1, 1, 0, c_black, .5);
        }
        
        // Holster
        if global.has_holster == true {
            draw_sprite_ext(spr_weapon_holster, 0, 32, 112, 1, 1, 0, c_white, 1);
            draw_text(32, 136, "[1]");
        } else {
            draw_sprite_ext(spr_weapon_holster, 0, 32, 112, 1, 1, 0, c_black, .5);
        }
        
        // Special Holster
        if global.has_special_holster == true {
            draw_sprite_ext(spr_special_holster, 0, 64, 112, 1, 1, 0, c_white, 1);
            draw_text(64, 136, "[2]");
        } else {
            draw_sprite_ext(spr_special_holster, 0, 64, 112, 1, 1, 0, c_black, .5);
        }
        
        // Helmet Holster
        if global.has_helmet_holster == true {
            draw_sprite_ext(spr_helmet_holster, 0, 96, 112, 1, 1, 0, c_white, 1);
            draw_text(96, 136, "[3]");
        } else {
            draw_sprite_ext(spr_helmet_holster, 0, 96, 112, 1, 1, 0, c_black, .5);
        }
        
        // Ring Holster
        if global.has_ring_holster == true { 
            draw_sprite_ext(spr_ring_holster, 0, 128, 112, 1, 1, 0, c_white, 1);
            draw_text(128, 136, "[4]");
        } else {
            draw_sprite_ext(spr_ring_holster, 0, 128, 112, 1, 1, 0, c_black, .5);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Debug Ui

if (show_debug_ui == true) {

    draw_set_colour(c_white);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);           
    draw_set_font(fnt_stats); 
    draw_sprite(spr_stat_background, 0, 0, 0);
    
    draw_text(16, 16, 'Fps: ' + string(fps) + '/' + string(room_speed));
    draw_text(16, 32, 'Fps Real: ' + string(round(fps_real)));   
    draw_text(16, 48, 'Player x: ' + string(round(obj_player.x))); 
    draw_text(16, 64, 'Player y: ' + string(round(obj_player.y))); 
    draw_text(16, 80, 'Zone: ' + string(global.zone_index)); 
    draw_text(16, 96, 'Enemies: ' + string(instance_number(obj_enemy_parent)) + '/10');
    draw_text(16, 112, 'Game Version: ' + global.version); 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Override Draw Event
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make a bit of noise

if global.has_crate_scanner {
    var s = audio_play_sound(snd_oppo_beep, 1, false);
    audio_sound_pitch(s, 2); 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
