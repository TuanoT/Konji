<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_nit_shot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initalize Variables

range = 1;
damage = 1;
poison_damage = 0;
slow_time = 0;
dazed_time = 0;
cursed_time = 0;
sick_time = 0;
bounce = 0;
ignore_defence = false;

image_index = irandom(image_number);
parent = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy if out of range

if (point_distance(x, y, xstart, ystart) &gt;= range) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change the depth depending on the y axis

depth = -y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy / Bounce

if bounce &gt; 0 {
    bounce--;
    move_bounce_solid(false);
    image_angle = direction;
} else {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Damage Player

if other.invulnerable == false {
    
    // Find Defence
    var def = 0;
    if ignore_defence == false {
        def = obj_player.defence;
    }

    // Find Damage
    if ((damage * .9) - def &gt; 0) {
        var dmg = floor((damage * .9) - def);
    } else {
        var dmg = 0;
    }
    
    var dmg_final = floor((dmg + ceil(damage * .1)) * other.cursed_multiplier);
    other.hp -= dmg_final;
    var dink = !bool(dmg);
    
    // Poison
    if poison_damage != 0 &amp;&amp; obj_controller.inventory_slot[11] != 1314 {
        other.poison_damage = poison_damage;
        other.poison_amount = 6;
    }
    
    // Slow
    if slow_time != 0 {
        other.slow_alarm = slow_time;
        other.slow_multiplier = .5;
    }
    
    // Dazed
    if dazed_time != 0 {
        other.dexterity_alarm = dazed_time;
        other.dexterity_multiplier = .5;
    }
    
    // Cursed
    if cursed_time != 0 {
        other.cursed_alarm = cursed_time;
        other.cursed_multiplier = 2;
    }
    
    // Sick
    if sick_time != 0 {
        other.sick_alarm = sick_time;
        other.sick = true;
    }
    
    repeat irandom_range(2, 4) {
        instance_create(other.x, other.y, obj_particle);
    }
    
    // Damage Text
    var inst = instance_create(other.x, other.y - (other.sprite_height / 2), obj_damage_text);
    inst.text = dmg_final;
    if ignore_defence = true {
        inst.colour = c_purple;
    }
    
    // Thorns
    if obj_player.thorns != 0 &amp;&amp; parent != -1 &amp;&amp; instance_exists(parent) {
        var dmg = obj_player.thorns;
        with parent {
            if invulnerable == false {
            
                hp -= dmg;
                
                // Text
                var inst = instance_create(x + shot_start_x, y - (sprite_height / 2) + shot_start_y, obj_damage_text);
                inst.text = dmg;
                
                // Flash Red
                image_red = 100;
            }
            
            // Create Particles
            repeat irandom_range(2, 4) {
                var inst = instance_create(x + shot_start_x, y + shot_start_y, obj_particle);
                inst.sprite_index = particle_sprite;
            }
        }
        
        // Play Thorns Sound
        var snd = audio_play_sound(snd_thorns, 1, false);
        audio_sound_pitch(snd, random_range(0.9, 1.1));
        
    } else {

        // Play Impact Sound
        if dink {
            var snd = audio_play_sound(snd_thorns, 1, false);
            audio_sound_pitch(snd, random_range(0.9, 1.1));
        } else {
            var snd = audio_play_sound(choose(snd_player_hurt_1, snd_player_hurt_2, snd_player_hurt_3), 1, false);
            audio_sound_pitch(snd, random_range(0.95, 1.05));
        }
    }
}

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
